# -*- coding: utf-8 -*-
"""Keystroke dynamics XGBoost Second Orde.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qMW1j1MfTsCJoaAM-KnfbVPi2cfJVDCa
"""

import numpy as np
import pandas as pd

from google.colab import files

uploaded = files.upload()

df = pd.read_csv('StrongPassword.csv')
print(type(df))
df.head()

def extract_first_order_features(df):

    # Dwell time (H.<key>)
    dwell_columns = [col for col in df.columns if col.startswith('H.')]
    dwell_times_df = df[dwell_columns]

    # Latency (DD.<key1>.<key2>)
    latency_columns = [col for col in df.columns if col.startswith('DD.')]
    latency_df = df[latency_columns]

    # Flight time (UD.<key1>.<key2>)
    flight_columns = [col for col in df.columns if col.startswith('UD.')]
    flight_times_df = df[flight_columns]

    first_order_df = pd.concat([dwell_times_df, latency_df, flight_times_df], axis=1)

    return first_order_df

# Ekstraksi fitur orde pertama dari dataset
first_order_df = extract_first_order_features(df)

# Menampilkan hasil ekstraksi fitur orde pertama
first_order_df.head()

# Fungsi untuk menghitung mean dan standard deviation dari fitur orde pertama
def extract_second_order_features(first_order_df, dwell_columns, latency_columns, flight_columns):
    second_order_features = {}

    # Hitung mean dan standard deviation untuk setiap baris dari fitur dwell time
    second_order_features['mean_dwell_time'] = first_order_df[dwell_columns].mean(axis=1)
    second_order_features['std_dwell_time'] = first_order_df[dwell_columns].std(axis=1)

    # Hitung mean dan standard deviation untuk setiap baris dari fitur latency
    second_order_features['mean_latency'] = first_order_df[latency_columns].mean(axis=1)
    second_order_features['std_latency'] = first_order_df[latency_columns].std(axis=1)

    # Hitung mean dan standard deviation untuk setiap baris dari fitur flight time
    second_order_features['mean_flight_time'] = first_order_df[flight_columns].mean(axis=1)
    second_order_features['std_flight_time'] = first_order_df[flight_columns].std(axis=1)

    # Buat DataFrame fitur orde kedua
    second_order_df = pd.DataFrame(second_order_features)

    return second_order_df


# Tentukan kembali kolom untuk dwell time, latency, dan flight time
dwell_columns = [col for col in df.columns if col.startswith('H.')]
latency_columns = [col for col in df.columns if col.startswith('DD.')]
flight_columns = [col for col in df.columns if col.startswith('UD.')]

# Ekstraksi fitur orde kedua
second_order_df = extract_second_order_features(first_order_df, dwell_columns, latency_columns, flight_columns)

# Menampilkan beberapa baris pertama fitur orde kedua
second_order_df.head(10)

test_size = 0.2

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import xgboost as xgb

# Mengonversi target (user) menjadi nilai numerik menggunakan LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(df['subject'])

# Pisahkan data menjadi latih dan uji
X_train, X_test, y_train, y_test = train_test_split(first_order_df, y, test_size=test_size, random_state=42)

# Inisialisasi model XGBoost
model_first_order = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')

# Melatih model pada data latih
model_first_order.fit(X_train, y_train)

# Prediksi pada data uji
y_pred_first_order = model_first_order.predict(X_test)

# Menghitung akurasi
accuracy_first_order = accuracy_score(y_test, y_pred_first_order)
print(f"Accuracy using first-order features: {accuracy_first_order * 100:.2f}%")

# Pisahkan data menjadi latih dan uji dengan fitur orde kedua
X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(second_order_df, y, test_size=test_size, random_state=42)

# Inisialisasi model XGBoost
model_second_order = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')

# Melatih model pada data latih dengan fitur orde kedua
model_second_order.fit(X_train_2, y_train_2)

# Prediksi pada data uji
y_pred_second_order = model_second_order.predict(X_test_2)

# Menghitung akurasi
accuracy_second_order = accuracy_score(y_test_2, y_pred_second_order)
print(f"Accuracy using second-order features: {accuracy_second_order * 100:.2f}%")

print(f"Accuracy comparison:")
print(f" - First-order features: {accuracy_first_order * 100:.2f}%")
print(f" - Second-order features: {accuracy_second_order * 100:.2f}%")

# Menggabungkan fitur orde pertama dan orde kedua
combined_df = pd.concat([first_order_df, second_order_df], axis=1)

# Menampilkan beberapa baris pertama dari data gabungan
combined_df.head()

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix
import xgboost as xgb
from sklearn.preprocessing import LabelEncoder

# Mengonversi target (user) menjadi nilai numerik menggunakan LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(df['subject'])  # Target (kelas pengguna dari DataFrame asli)

# Pisahkan data menjadi latih dan uji menggunakan fitur gabungan
X_train_combined, X_test_combined, y_train_combined, y_test_combined = train_test_split(combined_df, y, test_size=test_size, random_state=42)

# Inisialisasi model XGBoost untuk fitur gabungan
model_combined = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')

# Melatih model pada data latih gabungan
model_combined.fit(X_train_combined, y_train_combined)

# Prediksi pada data uji gabungan
y_pred_combined = model_combined.predict(X_test_combined)

# Menghitung akurasi untuk fitur gabungan
accuracy_combined = accuracy_score(y_test_combined, y_pred_combined)
print(f"Accuracy using combined first-order and second-order features: {accuracy_combined * 100:.2f}%")

# Menghitung precision, recall, dan F1-score
precision = precision_score(y_test, y_pred_combined, average='macro')
recall = recall_score(y_test, y_pred_combined, average='macro')
f1 = f1_score(y_test, y_pred_combined, average='macro')

print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1-Score: {f1:.2f}')

# Menampilkan perbandingan akurasi
print(f"Accuracy comparison:")
print(f" - First-order features: {accuracy_first_order * 100:.2f}%")
print(f" - Second-order features: {accuracy_second_order * 100:.2f}%")
print(f" - Combined first-order and second-order features: {accuracy_combined * 100:.2f}%")